apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: flask
  labels:
    app: flask
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/app-root: /api/count
spec:
  defaultBackend:
    service:
      name: flask
      port:
        number: 80
  rules:
  - host: my.k8s.app
    http:
      paths:
      - path: /api/count
        pathType: Prefix
        backend:
          service:
            name: flask
            port:
              number: 80
      - path: /api/count/add
        pathType: Prefix
        backend:
          service:
            name: flask
            port:
              number: 80
---
apiVersion: v1
kind: Service
metadata:
  name: flask
  labels:
    app: flask
    tier: frontend
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5000
  selector:
    app: flask
    tier: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask
  labels:
    app: flask
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
      tier: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: flask
        tier: frontend
    spec:
      containers:
      - image: v17v3/flaskapp:v1.2
        name: flask
        resources:
          limits:
            cpu: "250m"
            memory: "490Mi"
          requests:
            cpu: "5m"
            memory: "50Mi"
        env:
        - name: POSTGRES_USER
          value: flask-user
        - name: POSTGRES_HOST
          value: postgres-postgresql
        - name: POSTGRES_PORT
          value: "5812"
        - name: POSTGRES_DB_NAME
          value: flask-db
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-postgresql
              key: postgresql-password
        ports:
        - containerPort: 5000
          name: flask
      volumes:
      - name: flask-persistent-storage
        persistentVolumeClaim:
          claimName: flask-pv-claim